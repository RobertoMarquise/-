import json
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.clock import Clock
import random
import os

class TimerApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.history = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.load_history()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.messages = self.load_messages()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞

    def build(self):
        self.layout = BoxLayout(orientation='vertical')
        
        self.timer_label = Label(text='–ú–ú:–°–° –∏–ª–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
        self.layout.add_widget(self.timer_label)
        
        self.time_input = TextInput(hint_text='–û—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è', multiline=False)
        self.layout.add_widget(self.time_input)
        
        self.start_button = Button(text='–°—Ç–∞—Ä—Ç')
        self.start_button.bind(on_press=self.start_timer)
        self.layout.add_widget(self.start_button)

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
        self.view_history_button = Button(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–ª–µ—Ä–µ—é')
        self.view_history_button.bind(on_press=self.show_history)
        self.layout.add_widget(self.view_history_button)

        # –ö–Ω–æ–ø–∫–∞ "–ù–µ —Å–ª–æ–∂–∏–ª–æ—Å—å" –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        self.cancel_button = Button(text='–ù–µ —Å–ª–æ–∂–∏–ª–æ—Å—å', disabled=True)
        self.cancel_button.bind(on_press=self.cancel_timer)

        return self.layout

    def start_timer(self, instance):
        try:
            time_str = self.time_input.text.strip()
            if ':' in time_str:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ
                minutes, seconds = map(int, time_str.split(':'))
                self.time_left = minutes * 60 + seconds  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
            else:
                self.time_left = int(time_str)  # –í–≤–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
            if self.time_left < 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–æ–ª—å—à–µ –ª–∏ –≤—Ä–µ–º—è 5 —Å–µ–∫—É–Ω–¥
                raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥.")
            
            self.timer_label.text = f'–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {self.time_left} —Å–µ–∫—É–Ω–¥'
            self.start_button.disabled = True
            self.cancel_button.disabled = False  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ —Å–ª–æ–∂–∏–ª–æ—Å—å"
            self.layout.add_widget(self.cancel_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ layout
            self.timer_event = Clock.schedule_interval(self.update_timer, 1)
        except ValueError as e:
            self.timer_label.text = str(e)

    def update_timer(self, dt):
        if self.time_left > 0:
            self.time_left -= 1
            self.timer_label.text = f'–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {self.time_left} —Å–µ–∫—É–Ω–¥'
        else:
            self.timer_event.cancel()
            self.show_result_buttons()

    def cancel_timer(self, instance):
        self.timer_event.cancel()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.time_left = 0  # –û–±–Ω—É–ª—è–µ–º –≤—Ä–µ–º—è
        self.timer_label.text = '–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'
        self.start_button.disabled = False  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç"
        self.cancel_button.disabled = True  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ —Å–ª–æ–∂–∏–ª–æ—Å—å"
        self.layout.remove_widget(self.cancel_button)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ layout
        self.show_main_screen()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É

    def show_result_buttons(self):
        self.layout.clear_widgets()
        self.layout.add_widget(Label(text='–í—Ä–µ–º—è'))
        
        done_button = Button(text='–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ')
        done_button.bind(on_press=self.show_message)
        self.layout.add_widget(done_button)
        
        not_done_button = Button(text='–ù–µ —Å–ª–æ–∂–∏–ª–æ—Å—å')
        not_done_button.bind(on_press=self.cancel_timer)
        self.layout.add_widget(not_done_button)

    def show_message(self, instance):
        message = random.choice(self.messages)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        #emoji_choice = random.choice(["üòä", "üéâ", "üëç"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history.append(f'{message}')
        self.save_history()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª
        
        self.layout.clear_widgets()
        self.layout.add_widget(Label(text=f'{message}'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        view_history_button = Button(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–ª–µ—Ä–µ—é')
        view_history_button.bind(on_press=self.show_history)
        self.layout.add_widget(view_history_button)

    def show_history(self, instance):
        self.layout.clear_widgets()
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π BoxLayout –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        history_layout = BoxLayout(orientation='vertical')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        history_layout.add_widget(Label(text='–ì–∞–ª–µ—Ä–µ—è', size_hint_y=None, height=30))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
        for message in self.history:
            history_layout.add_widget(Label(text=message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
        back_button = Button(text='–ù–∞–∑–∞–¥')
        back_button.bind(on_press=self.show_main_screen)
        history_layout.add_widget(back_button)
        
        self.layout.add_widget(history_layout)

    def show_main_screen(self, instance=None):
        self.layout.clear_widgets()
        self.layout.add_widget(self.timer_label)
        self.layout.add_widget(self.time_input)
        self.layout.add_widget(self.start_button)
        self.layout.add_widget(self.view_history_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é" –æ–±—Ä–∞—Ç–Ω–æ
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.start_button.disabled = False
        self.cancel_button.disabled = True
        if self.cancel_button in self.layout.children:
            self.layout.remove_widget(self.cancel_button)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ —Å–ª–æ–∂–∏–ª–æ—Å—å"

    def save_history(self):
        with open('history.json', 'w') as f:
            json.dump(self.history, f)

    def load_history(self):
        if os.path.exists('history.json'):
            with open('history.json', 'r') as f:
                self.history = json.load(f)

    def load_messages(self):
        if os.path.exists('messages.json'):
            with open('messages.json', 'r') as f:
                data = json.load(f)
                return data.get("messages", [])
        else:
            return ["–≠—Ç–æ –Ω–∞—á–∞–ª–æ"]  # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if __name__ == '__main__':
    TimerApp().run()
